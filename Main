import telebot
from telebot import types
import requests
import wikipedia
from bs4 import BeautifulSoup

# API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '7697130153:AAHjrKm4FVmBEGTxZcanyJpRz-UdHc5x8lA'
bot = telebot.TeleBot(API_TOKEN)

# –°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤
genres = [
    "Action", "Adventure", "RPG", "Strategy", "Simulation",
    "Racing", "Sports", "Puzzle", "Horror", "Multiplayer",
    "Shooter", "Platformer", "Fighting", "Survival", "Open World",
    "Stealth", "Battle Royale", "MMORPG", "Sandbox", "Indie",
    "Casual", "Party", "Educational", "VR", "Card Game",
    "Turn-Based", "Real-Time", "Tactical", "Roguelike", "Metroidvania"
]

# –î–∞–Ω–Ω—ã–µ –ø–æ –∏–≥—Ä–∞–º
games_data = {
    "free": [],
    "discounted": []
}

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–Ω—Ä–æ–≤ –∏–≥—Ä
genre_cache = {}

def get_genres_from_wikipedia(game_title):
    """–ü–æ–ª—É—á–∞–µ—Ç –∂–∞–Ω—Ä—ã –∏–≥—Ä—ã –∏–∑ Wikipedia"""
    try:
        # –ò—â–µ–º —Å—Ç–∞—Ç—å—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–≥—Ä—ã
        page = wikipedia.page(game_title)
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
        text = page.content
        # –ò—â–µ–º –∂–∞–Ω—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç–∞—Ç—å–∏
        found_genres = [genre for genre in genres if genre.lower() in text.lower()]
        return found_genres
    except wikipedia.exceptions.PageError:
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        return []
    except wikipedia.exceptions.DisambiguationError:
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Mario" –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –∏–≥—Ä–æ–π, –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º)
        return []

def get_genres_from_fandom(game_title):
    """–ü–æ–ª—É—á–∞–µ—Ç –∂–∞–Ω—Ä—ã –∏–∑ Fandom (–µ—Å–ª–∏ –Ω–∞–π–¥—ë—Ç—Å—è —Å—Ç–∞—Ç—å—è)"""
    search_url = f"https://www.fandom.com/?s={game_title.replace(' ', '+')}"
    headers = {"User-Agent": "Mozilla/5.0"}
    
    response = requests.get(search_url, headers=headers)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        first_result = soup.find("a", {"class": "search-result__title"})
        
        if first_result:
            game_url = first_result["href"]
            game_page = requests.get(game_url, headers=headers)
            game_soup = BeautifulSoup(game_page.text, 'html.parser')
            
            genre_section = game_soup.find("div", {"data-source": "genre"})
            if genre_section:
                return [genre.text.strip() for genre in genre_section.find_all("a")]
    
    return []

def get_game_genres(game_title):
    """–ü–æ–ª—É—á–∞–µ—Ç –∂–∞–Ω—Ä—ã –∏–≥—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if game_title in genre_cache:
        return genre_cache[game_title]
    
    # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã –∏–∑ Wikipedia
    genres = get_genres_from_wikipedia(game_title)
    
    # –ï—Å–ª–∏ –∂–∞–Ω—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º Fandom
    if not genres:
        genres = get_genres_from_fandom(game_title)
    
    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    genre_cache[game_title] = genres
    
    return genres

def parse_epic_games():
    """–ü–∞—Ä—Å–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏ —Å–∫–∏–¥–æ—á–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ Epic Games Store"""
    url = "https://store-site-backend-static.ak.epicgames.com/freeGamesPromotions"
    response = requests.get(url)
    data = response.json()

    games_data["free"].clear()
    games_data["discounted"].clear()

    if 'data' in data and 'Catalog' in data['data']:
        for game in data['data']['Catalog']['searchStore']['elements']:
            title = game.get('title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')
            price_info = game.get('price', {}).get('totalPrice', {}).get('fmtPrice', {})
            original_price = price_info.get('originalPrice', '–ù–µ—Ç —Ü–µ–Ω—ã')
            discount_price = price_info.get('discountPrice', '0.00')
            is_free = discount_price == "0" or discount_price == "0.00"

            # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã
            game_genres = get_game_genres(title)

            game_info = {
                "title": title,
                "price": original_price,
                "discount": discount_price,
                "is_free": is_free,
                "genres": game_genres
            }

            if is_free:
                games_data["free"].append(game_info)
            else:
                games_data["discounted"].append(game_info)
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ò–≥—Ä—ã –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ")
    btn2 = types.KeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –∂–∞–Ω—Ä–æ–º")
    btn3 = types.KeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –∏–≥—Ä–æ–π")
    markup.add(btn1, btn2, btn3)

    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è Epic Games Store. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–°–ª–µ–¥–∏—Ç—å –∑–∞ –∂–∞–Ω—Ä–æ–º")
def ask_for_genre(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–∞–Ω—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(genre) for genre in genres]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in genres)
def show_games_by_genre(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–≥—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞"""
    genre = message.text
    found_games = [game for game in games_data["free"] + games_data["discounted"] if genre in game['genres']]

    if found_games:
        response = f"üéÆ –ù–∞–π–¥–µ–Ω—ã –∏–≥—Ä—ã –≤ –∂–∞–Ω—Ä–µ '{genre}':\n"
        for game in found_games:
            response += f"- {game['title']} ({game['price']})\n"
    else:
        response = f"–ò–≥—Ä –≤ –∂–∞–Ω—Ä–µ '{genre}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def go_back(message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    send_welcome(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
